<<<<<<< .mine
set serveroutput on;
create or replace function assert_equals
	(salida boolean, salida_esperada boolean) 
	return varchar2
is
begin
	if salida=salida_esperada then
		return 'exito';
	else
		return 'fallo';
	end if;
end;
/

--socios
create or replace package pruebas_socios
is
	procedure inicializar;
	procedure insertar(nombre_prueba varchar2, w_dni varchar2, w_nombre varchar2, w_nacido date, w_registrado date,w_direccion varchar2,
		salida_esperada boolean);
	procedure actualizar(nombre_prueba varchar2, w_dni varchar2,w_nombre varchar2, w_nacido date, w_registrado date,w_direccion varchar2,
		salida_esperada boolean);
	procedure eliminar(nombre_prueba varchar2, w_dni varchar2, salida_esperada boolean);
end;
/

create or replace package body pruebas_socios
is
--inicializar
	procedure inicializar as
	begin
		delete from socios;
	end;
--insertar
	procedure insertar(nombre_prueba varchar2, w_dni varchar2, w_nombre varchar2, w_nacido date, w_registrado date, w_direccion varchar2,
		salida_esperada boolean) as
		contador integer;
		salida boolean := false;
	begin
		insert into socios values(w_dni, w_nombre, w_nacido, w_registrado, w_direccion, 'email', '666666666');
	
		select count(*) into contador from socios where dni=w_dni and nombre=w_nombre and registrado=w_registrado and
			direccion=w_direccion;

		if contador=1 then
			salida := true;
		end if;

			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(salida, salida_esperada));
			commit work;
		exception
		when others then
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
			rollback;
	end;
--actualizar
	procedure actualizar(nombre_prueba varchar2, w_dni varchar2,w_nombre varchar2, w_nacido date, w_registrado date,w_direccion varchar2,
		salida_esperada boolean)as
		contador integer;
		salida boolean := false;
	begin
		update socios set nombre=w_nombre, nacido=w_nacido, registrado=w_registrado, direccion=w_direccion where 
			dni=w_dni;
		select count(*) into contador from socios where dni=w_dni;
		if contador=1 then
			salida := true;
		end if;
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(salida, salida_esperada));
			commit work;
		exception
		when others then
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
			rollback;
	end;
--eliminar
	procedure eliminar(nombre_prueba varchar2, w_dni varchar2, salida_esperada boolean) as
		e_dni socios.dni%TYPE;
	begin
		delete from socios where dni=w_dni;
		select dni into e_dni from socios where dni=w_dni;
		dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));	
		commit work;
	exception
	when no_data_found then
		dbms_output.put_line(nombre_prueba || ':' || assert_equals(true, salida_esperada));
		commit work;
	when others then
		dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
		rollback;
	end;
end;
/

=======
--pruebas
>>>>>>> .r128
<<<<<<< .mine
=======
declare 
begin
	pruebas_lineas_devoluciones.inicializar;
	pruebas_lineas_alquileres.inicializar;
	pruebas_alquileres.inicializar;
	pruebas_devoluciones.inicializar;
	pruebas_reservas.inicializar;
	pruebas_articulos.inicializar;
	pruebas_socios.inicializar;
	pruebas_socios.insertar('Prueba 1 - insertar socio', '12345678A', 'juan', '20-SEP-1980', current_date, 'calle', true);
	pruebas_socios.insertar('Prueba 2 - insertar socio con dni duplicado', '12345678A', 'juan', '20-SEP-1980', current_date, 'calle',  false);
	pruebas_socios.actualizar('Prueba 3 - modificar socio', '12345678A', 'Juan','20-SEP-1980', current_date, 'calle' , true);
	pruebas_socios.actualizar('Prueba 4 - modificar socio y poner dni erroneo', '12345668A', 'Juan','20-SEP-1980', current_date, 'calle' , false);
	pruebas_socios.eliminar('Prueba 5 - eliminar socio', '11111111A', true);
	pruebas_socios.insertar('Prueba 6 - insertar socio', '11111111A', 'maria', '13-OCT-2000', current_date, 'calle', true);
	pruebas_socios.insertar('Prueba 7 - insertar socio con dni incorrecto', ' 11111112A', 'jose', '13-OCT-2000', current_date, 'calle', false);
	pruebas_
end;
/
>>>>>>> .r128
<<<<<<< .mine


--alquileres
create or replace package pruebas_alquileres
is
	procedure inicializar;
	procedure insertar(nombre_prueba varchar2, w_id_alquiler varchar2, w_fecha date, w_tiempo number, w_dni varchar2, 
		salida_esperada boolean);
	procedure actualizar(nombre_prueba varchar2, w_id_alquiler varchar2, w_fecha date, w_tiemp number, w_dni varchar2, 
		salida_esperada boolean);
	procedure eliminar(nombre_prueba varchar2, w_id_alquiler varchar2, salida_esperada boolean);
end;
/

create or replace package body pruebas_alquileres
is
--inicializacion
	procedure inicializar as
	begin
		delete from alquileres;
		commit;
	end;
--inserccion
	procedure insertar(nombre_prueba varchar2, w_id_alquiler varchar2, w_fecha date, w_tiempo number, w_dni varchar2, 
		salida_esperada boolean) as
		contador integer;
		salida boolean := false;
	begin

		insert into alquileres values(w_id_alquiler, w_fecha, w_tiempo, w_dni);
	
		select count(*) into contador from alquileres where id_alquiler=w_id_alquiler and fecha=w_fecha and tiempo=w_tiempo and dni=w_dni;

		if contador=1 then
			salida := true;
		end if;

			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(salida, salida_esperada));
			commit work;
		exception
		when others then
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
			rollback;
	end;
--actualizacion
	procedure actualizar(nombre_prueba varchar2, w_id_alquiler varchar2, w_fecha date, w_tiemp number, w_dni varchar2, 
		salida_esperada boolean) as
		contador integer;
		salida boolean := false;
	begin
		update alquileres set dni=w_dni, fecha=w_fecha, tiempo=w_tiemp where id_alquiler=w_id_alquiler;
		select count(*) into contador from alquileres where id_alquiler=w_id_alquiler and dni=w_dni and
		 fecha=w_fecha and tiempo=w_tiemp;
		if contador=1 then
			salida := true;
		end if;
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(salida, salida_esperada));
			commit work;
		exception
		when others then
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
			rollback;
	end;
--eliminacion
	procedure eliminar(nombre_prueba varchar2, w_id_alquiler varchar2, salida_esperada boolean) as
		e_id_alquiler alquileres.id_alquiler%TYPE;
	begin
		delete from alquileres where id_alquiler=w_id_alquiler;
		select id_alquiler into e_id_alquiler from alquileres where id_alquiler=w_id_alquiler;
		dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));	
		commit work;
	exception
	when no_data_found then
		dbms_output.put_line(nombre_prueba || ':' || assert_equals(true, salida_esperada));
		commit work;
	when others then
		dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
		rollback;
	end;
end;
/
--lineas_alquileres
create or replace package pruebas_lineas_alquileres
is
	procedure inicializar;
	procedure insertar(nombre_prueba varchar2, w_id_la number, w_cantidad number, 
		w_id_alquiler varchar2, w_id_articulo number, salida_esperada boolean);
	procedure actualizar(nombre_prueba varchar2,  w_id_la number, w_cantidad number, 
		w_id_alquiler varchar2, w_id_articulo number, salida_esperada boolean);
	procedure eliminar(nombre_prueba varchar2, w_id_la varchar2, salida_esperada boolean);
end;
/

create or replace package body pruebas_lineas_alquileres
is
--inicializacion
	procedure inicializar as
	begin
		delete from lineas_alquileres;
		commit;
	end;
--inserccion
	procedure insertar(nombre_prueba varchar2, w_id_la number, w_cantidad number, 
		w_id_alquiler varchar2, w_id_articulo number, salida_esperada boolean) as
		contador integer;
		salida boolean := false;
		old_cantidad articulos.cantidad%TYPE;
		new_cantidad articulos.cantidad%TYPE;
	begin
		select cantidad into old_cantidad from articulos where id_articulo=w_id_articulo;
		select count(*) into contador from alquileres where id_alquiler=w_id_alquiler;
		if contador=0 then
			insert into alquileres values(w_id_alquiler, current_date, 2, '11111111A');
		end if;
		select cantidad into new_cantidad from articulos where id_articulo=w_id_articulo;
		insert into lineas_alquileres values(w_id_la, w_cantidad, null, w_id_alquiler, w_id_articulo);
	
		select count(*) into contador from lineas_alquileres where id_la=w_id_la;

		if contador=1 and new_cantidad=old_cantidad - w_cantidad then
			salida := true;
		end if;

			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(salida, salida_esperada));
			commit work;
		exception
		when others then
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
			rollback;
	end;
--actualizacion
	procedure actualizar(nombre_prueba varchar2,  w_id_la number, w_cantidad number, 
		w_id_alquiler varchar2, w_id_articulo number, salida_esperada boolean) as
		contador integer;
		salida boolean := false;
		old_cantidad_articulo articulos.cantidad%TYPE;
		new_cantidad_articulo articulos.cantidad%TYPE;
		old_cantidad lineas_alquileres.cantidad%TYPE;		
	begin
		select cantidad into old_cantidad from lineas_alquileres where id_la=w_id_la;
		select cantidad into old_cantidad_articulo from articulos where id_articulo=w_id_articulo;
		update lineas_alquileres set cantidad=w_cantidad, id_alquiler=w_id_alquiler, id_articulo=w_id_articulo 
			where id_la=w_id_la;

		select count(*) into contador from lineas_alquileres where id_la=w_id_la;
		select cantidad into new_cantidad_articulo from articulos where id_articulo=w_id_articulo;

		if contador=1 then
			salida := true;
		end if;
		if w_cantidad!=old_cantidad and new_cantidad_articulo!=old_cantidad_articulo-w_cantidad+old_cantidad then
			salida := false;
		end if;
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(salida, salida_esperada));
			commit work;
		exception
		when others then
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
			rollback;
	end;
--eliminacion
	procedure eliminar(nombre_prueba varchar2, w_id_la varchar2, salida_esperada boolean) as
		e_id_la lineas_alquileres.id_la%TYPE;
		old_cantidad_articulo articulos.cantidad%TYPE;
		new_cantidad_articulo articulos.cantidad%TYPE;
		old_cantidad lineas_alquileres.cantidad%TYPE;	
		w_id_articulo articulos.id_articulo%TYPE;	
	begin
		select id_articulo into w_id_articulo from lineas_alquileres where id_la=w_id_la;
		select cantidad into old_cantidad from lineas_alquileres where id_la=w_id_la;
		select cantidad into old_cantidad_articulo from articulos where id_articulo=w_id_articulo;

		delete from lineas_alquileres where id_la=w_id_la;
		select cantidad into new_cantidad_articulo from articulos where id_articulo=w_id_articulo;
		select id_la into e_id_la from lineas_alquileres where id_la=w_id_la;
		dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));	
		commit work;
	exception
	when no_data_found then
		if old_cantidad_articulo=new_cantidad_articulo-old_cantidad then
			dbms_output.put_line(nombre_prueba || ':' || assert_equals(true, salida_esperada));
		end if;
		commit work;
	when others then
		dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
		rollback;
	end;
end;
/



--reservas
create or replace package pruebas_reservas
is
	procedure inicializar;
	procedure insertar(nombre_prueba varchar2, w_id_articulo number, w_dni varchar2, w_fecha date, salida_esperada boolean);
	procedure actualizar(nombre_prueba varchar2, old_id_articulo number, new_id_articulo varchar2, 
		w_dni varchar2, w_fecha date, salida_esperada boolean);
	procedure eliminar(nombre_prueba varchar2, w_id_articulo number, w_dni varchar2, salida_esperada boolean);
end;
/

create or replace package body pruebas_reservas
is
--inicializacion
	procedure inicializar as
	begin
		delete from reservas;
		commit;
	end;
--inserccion
	procedure insertar(nombre_prueba varchar2, w_id_articulo number, w_dni varchar2, w_fecha date, salida_esperada boolean) as
		contador integer;
		salida boolean := false;
		old_cantidad articulos.cantidad%TYPE;
		new_cantidad articulos.cantidad%TYPE;
	begin
		select cantidad into old_cantidad from articulos where id_articulo=w_id_articulo;
		insert into reservas values(w_id_articulo, w_dni, w_fecha);
		select cantidad into new_cantidad from articulos where id_articulo=w_id_articulo;
		select count(*) into contador from reservas where id_articulo=w_id_articulo and dni = w_dni and fecha = w_fecha;

		if contador=1 and old_cantidad=new_cantidad-1 then
			salida := true;
		end if;

			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(salida, salida_esperada));
			commit work;
		exception
		when others then
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
			rollback;
	end;
--actualizacion
	procedure actualizar(nombre_prueba varchar2, old_id_articulo number, new_id_articulo varchar2, 
		w_dni varchar2, w_fecha date, salida_esperada boolean) as
		contador integer;
		salida boolean := false;
		old_cantidad_old_articulo articulos.cantidad%TYPE;
		old_cantidad_new_articulo articulos.cantidad%TYPE;
		new_cantidad_old_articulo articulos.cantidad%TYPE;
		new_cantidad_new_articulo articulos.cantidad%TYPE;
	begin
		select cantidad into old_cantidad_old_articulo from articulos where id_articulo = old_id_articulo;
		if old_id_articulo != new_id_articulo then
			select cantidad into old_cantidad_new_articulo from articulos where id_articulo = new_id_articulo;
		end if;
		update reservas set fecha = w_fecha, id_articulo=new_id_articulo where id_articulo = old_id_articulo and dni = w_dni;

		select count(*) into contador from reservas where id_articulo = new_id_articulo and dni = w_dni and fecha = w_fecha;
		select cantidad into new_cantidad_old_articulo from articulos where id_articulo = old_id_articulo;

		if contador=1 then
			if old_id_articulo != new_id_articulo then
				select cantidad into new_cantidad_new_articulo from articulos where id_articulo = new_id_articulo;
				if new_cantidad_old_articulo=old_cantidad_old_articulo+1 and 
				new_cantidad_new_articulo = old_cantidad_new_articulo -1 then
					salida := true;
				end if;
			else
				salida := true;
			end if;
		end if;
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(salida, salida_esperada));
			commit work;
		exception
		when others then
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
			rollback;
	end;
--eliminacion
	procedure eliminar(nombre_prueba varchar2, w_id_articulo number, w_dni varchar2, salida_esperada boolean) as
		e_dni reservas.dni%TYPE;
		old_cantidad articulos.cantidad%TYPE;
		new_cantidad articulos.cantidad%TYPE;
	begin
		select cantidad into old_cantidad from articulos where id_articulo = w_id_articulo;
		delete from reservas where dni=w_dni and id_articulo = w_id_articulo;
		select cantidad into new_cantidad from articulos where id_articulo = w_id_articulo;
		select dni into e_dni from reservas where dni=w_dni and id_articulo = w_id_articulo;
		dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));	
		commit work;
	exception
	when no_data_found then
		if old_cantidad = new_cantidad +1 then
			dbms_output.put_line(nombre_prueba || ':' || assert_equals(true, salida_esperada));
		else
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));	
		end if;
		commit work;
	when others then
		dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
		rollback;
	end;
end;
/

--lineas_devoluciones
create or replace package pruebas_lineas_devoluciones
is
	procedure inicializar;
	procedure insertar(nombre_prueba varchar2, w_id_ld number, w_cantidad number, w_defectuoso number, 
		w_id_articulo number, w_id_devolucion number, salida_esperada boolean);
	procedure actualizar(nombre_prueba varchar2, w_id_ld number, w_cantidad number, w_defectuoso number, 
		w_id_articulo number, w_id_devolucion number, salida_esperada boolean);
	procedure eliminar(nombre_prueba varchar2, w_id_ld number, salida_esperada boolean);
end;
/

create or replace package body pruebas_lineas_devoluciones
is
--inicializacion
	procedure inicializar as
	begin
		delete from lineas_devoluciones;
		commit;
	end;
--inserccion
	procedure insertar(nombre_prueba varchar2, w_id_ld number, w_cantidad number, w_defectuoso number, 
		w_id_articulo number, w_id_devolucion number, salida_esperada boolean) as
		contador integer;
		salida boolean := false;
		old_cantidad articulos.cantidad%TYPE;
		new_cantidad articulos.cantidad%TYPE;
	begin
		select cantidad into old_cantidad from articulos where id_articulo=w_id_articulo;
		insert into lineas_devoluciones values(w_id_ld, w_cantidad,  w_defectuoso, w_id_articulo, w_id_devolucion);
		select cantidad into new_cantidad from articulos where id_articulo=w_id_articulo;

		select count(*) into contador from lineas_devoluciones where id_ld=w_id_ld and cantidad=w_cantidad 
			and defectuoso=w_defectuoso and id_articulo=w_id_articulo and id_devolucion=w_id_devolucion;

		if contador=1 then
			if w_defectuoso = 1 and old_cantidad = new_cantidad then
				salida := true;
			elsif old_cantidad + w_cantidad = new_cantidad then
				salida := true;
			end if;
			
		end if;

			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(salida, salida_esperada));
			commit work;
		exception
		when others then
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
			rollback;
	end;
--actualizar
	procedure actualizar(nombre_prueba varchar2, w_id_ld number, w_cantidad number, w_defectuoso number, w_id_articulo number, w_id_devolucion number, 
		salida_esperada boolean) as
		contador integer;
		salida boolean := false;
	begin
		update lineas_devoluciones set cantidad=w_cantidad, defectuoso=w_defectuoso, id_articulo=w_id_articulo, 
			id_devolucion=w_id_devolucion where id_ld = w_id_ld;
		select count(*) into contador from lineas_devoluciones where id_ld=w_id_ld and cantidad=w_cantidad 
			and defectuoso=w_defectuoso and id_articulo=w_id_articulo and id_devolucion=w_id_devolucion;
		if contador=1 then
			salida := true;
		end if;
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(salida, salida_esperada));
			commit work;
		exception
		when others then
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
			rollback;
	end;
--eliminacion
	procedure eliminar(nombre_prueba varchar2, w_id_ld number, salida_esperada boolean) as
		e_id_ld lineas_devoluciones.id_ld%TYPE;
	begin
		delete from lineas_devoluciones where id_ld=w_id_ld ;
		select id_ld into e_id_ld from lineas_devoluciones where id_ld=w_id_ld;
		dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));	
		commit work;
	exception
	when no_data_found then
		dbms_output.put_line(nombre_prueba || ':' || assert_equals(true, salida_esperada));
		commit work;
	when others then
		dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
		rollback;
	end;
end;
/

--devoluciones
create or replace package pruebas_devoluciones
is
	procedure inicializar;
	procedure insertar(nombre_prueba varchar2, w_id_devolucion number, w_dni varchar2, salida_esperada boolean);
	procedure actualizar(nombre_prueba varchar2, w_id_devolucion number, w_dni varchar2, salida_esperada boolean);
	procedure eliminar(nombre_prueba varchar2, w_id_devolucion number, salida_esperada boolean);
end;
/

create or replace package body pruebas_devoluciones
is
--inicializacion
	procedure inicializar as
	begin
		delete from devoluciones;
		commit;
	end;
--inserccion
	procedure insertar(nombre_prueba varchar2, w_id_devolucion number, w_dni varchar2, salida_esperada boolean) as
		contador integer;
		salida boolean := false;
	begin

		insert into devoluciones values(w_id_devolucion, current_date, w_dni);

		select count(*) into contador from devoluciones where id_devolucion=w_id_devolucion and dni=w_dni;

		if contador=1 then
			salida := true;
		end if;

			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(salida, salida_esperada));
			commit work;
		exception
		when others then
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
			rollback;
	end;
--actualizar
	procedure actualizar(nombre_prueba varchar2, w_id_devolucion number, w_dni varchar2, salida_esperada boolean) as
		contador integer;
		salida boolean := false;
	begin
		update devoluciones set dni=w_dni where id_devolucion=w_id_devolucion;
		select count(*) into contador from devoluciones where id_devolucion=w_id_devolucion and dni=w_dni;
		if contador=1 then
			salida := true;
		end if;
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(salida, salida_esperada));
			commit work;
		exception
		when others then
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
			rollback;
	end;
--eliminacion
	procedure eliminar(nombre_prueba varchar2, w_id_devolucion number, salida_esperada boolean) as
		e_id_devolucion devoluciones.id_devolucion%TYPE;
	begin
		delete from devoluciones where id_devolucion=w_id_devolucion;
		select id_devolucion into e_id_devolucion from devoluciones where id_devolucion=w_id_devolucion;
		dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));	
		commit work;
	exception
	when no_data_found then
		dbms_output.put_line(nombre_prueba || ':' || assert_equals(true, salida_esperada));
		commit work;
	when others then
		dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
		rollback;
	end;
end;
/
--articulos
create or replace package pruebas_articulos
is
	procedure inicializar;
	procedure insertar(nombre_prueba varchar2, w_id_articulo number, w_nombre varchar2, w_edad_restrictiva number, 
		w_cantidad number, w_precio number, w_compra number, salida_esperada boolean);
	procedure actualizar(nombre_prueba varchar2, w_id_articulo number, w_nombre varchar2, w_edad_restrictiva number, 
		w_cantidad number, w_precio number, w_compra number, salida_esperada boolean);
	procedure eliminar(nombre_prueba varchar2, w_id_articulo number, salida_esperada boolean);
end pruebas_articulos;
/

create or replace package body pruebas_articulos as
--inicializacion
	procedure inicializar as 
	begin 
		delete from articulos;
		commit;
	end inicializar;
--inserccion
	procedure insertar (nombre_prueba varchar2, w_id_articulo number, w_nombre varchar2, w_edad_restrictiva number, 
		w_cantidad number, w_precio number, w_compra number, salida_esperada boolean) as
		salida boolean := true;
		contador integer;
	begin
		insert into articulos values(w_id_articulo, w_nombre, w_edad_restrictiva,
		 'imagen', 'trailer', 'sinopsis', w_cantidad, w_precio, w_compra);
	
		select count(*) into contador from articulos where id_articulo = w_id_articulo and nombre = w_nombre and 
		edad_restrictiva=w_edad_restrictiva and cantidad=w_cantidad and precio=w_precio and compra=w_compra;
		if (contador=1) then
			salida := false;
		end if;
		commit work;

		dbms_output.put_line(nombre_prueba  || ':' || assert_equals(salida, salida_esperada));

		exception
		when others then
			dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
			rollback;
	end insertar;
--actualizacion
	procedure actualizar (nombre_prueba varchar2, w_id_articulo number, w_nombre varchar2, w_edad_restrictiva number, 
		w_cantidad number, w_precio number, w_compra number, salida_esperada boolean) as
		salida boolean := true;
		contador integer;
	begin
		update articulos set nombre = w_nombre, edad_restrictiva=w_edad_restrictiva, cantidad=w_cantidad
		,precio=w_precio, compra=w_compra where id_articulo = w_id_articulo;
	
		select count(*) into contador from articulos where id_articulo = w_id_articulo and nombre = w_nombre and 
		edad_restrictiva=w_edad_restrictiva and cantidad=w_cantidad and precio=w_precio and compra=w_compra;
		if (contador=1) then
			salida := false;
		end if;
		commit work;

		dbms_output.put_line(nombre_prueba  || ':' || assert_equals(salida, salida_esperada));

	exception
	when others then
		dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
		rollback;
	end actualizar;
--eliminacion
	procedure eliminar(nombre_prueba varchar2, w_id_articulo number, salida_esperada boolean) as
		e_id_articulo articulos.id_articulo%TYPE;
	begin
		delete from articulos where id_articulo=w_id_articulo;
		select id_articulo into e_id_articulo from articulos where id_articulo=w_id_articulo;
		dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));	
		commit work;
	exception
	when no_data_found then
		dbms_output.put_line(nombre_prueba || ':' || assert_equals(true, salida_esperada));
		commit work;
	when others then
		dbms_output.put_line(nombre_prueba  || ':' || assert_equals(false, salida_esperada));
		rollback;
	end;
end;
/

--pruebas
declare 
begin
	pruebas_lineas_devoluciones.inicializar;
	pruebas_lineas_alquileres.inicializar;
	pruebas_alquileres.inicializar;
	pruebas_devoluciones.inicializar;
	pruebas_reservas.inicializar;
	pruebas_articulos.inicializar;
	pruebas_socios.inicializar;
	pruebas_socios.insertar('Prueba 1 - insertar socio', '12345678A', 'juan', '20-SEP-1980', current_date, 'calle', true);
	pruebas_socios.insertar('Prueba 2 - insertar socio con dni duplicado', '12345678A', 'juan', '20-SEP-1980', current_date, 'calle',  false);
	pruebas_socios.actualizar('Prueba 3 - modificar socio', '12345678A', 'Juan','20-SEP-1980', current_date, 'calle' , true);
	pruebas_socios.actualizar('Prueba 4 - modificar socio y poner dni erroneo', '12345668A', 'Juan','20-SEP-1980', current_date, 'calle' , false);
	pruebas_socios.eliminar('Prueba 5 - eliminar socio', '11111111A', true);
end;
/
=======
>>>>>>> .r128
